from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from sq import db_start, create_profile, edit_profile,read_db, update_profile,delete_profile,check_record
from keyboard import inline_kb, rkm, key_force,key_happy,key_calm,key_sadness,key_fury,key_fear,keyboard
from datetime import datetime
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

storage = MemoryStorage() #—Å—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞, –¥–µ –±—É–¥—É—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—å –¥–∞–Ω—ñ –Ω–∞—à–æ–≥–æ —Å—Ç–∞–Ω—É (–¥–∞–Ω—ñ –∑–≤'—è–∑–∞–Ω—ñ –∑ —Ü–∏–º–∏ —Å—Ç–∞–Ω–∞–º–∏)
bot = Bot(token='6632849538:AAFOSXP-UBCmgdDu8d-8XmLvfZ41JSjewDY')
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    await db_start()


class ProfileStates(StatesGroup): #–∫–ª–∞—Å —â–æ –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–∞–Ω–∏ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞
    id_update = State()
    id_delete = State()
    emoji = State()
    emoji1 = State()
    value = State()
    what_heppend = State()
    editing = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('Menu',
                        reply_markup=rkm)

@dp.message_handler(Text(equals="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏ üëÄ"))
async def read(message: types.Message):
    if message.from_user.id == 346422904:
        data = await read_db()
        await message.answer(data)
    else:
        data = await read_db(user_id= message.from_user.id)
        await message.answer(data)

@dp.message_handler(Text(equals="–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å ‚úñÔ∏è"))
async def delete(message: types.Message):
    if message.from_user.id == 346422904:
        data = await read_db()
        await message.answer(text=f"<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤:</b>\n\n{data}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä ID –∑–∞–ø–∏—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                             parse_mode=types.ParseMode.HTML)
    else:
        data = await read_db(user_id=message.from_user.id)
        await message.answer(text=f"<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤:</b>\n\n{data}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä ID –∑–∞–ø–∏—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                             parse_mode=types.ParseMode.HTML)

    await ProfileStates.id_delete.set()
@dp.message_handler(state=ProfileStates.id_delete)
async def number_id_for_delete(message,state:FSMContext):
    try:
        id = int(message.text)
        if id > 0:
            async with state.proxy() as data:
                data['id_delete'] = id
            if message.from_user.id == 346422904:
                data = await check_record(id=id)
                if data == True:
                    await delete_profile(id)
                    await message.answer(f'–ó–∞–ø–∏—Å ‚Ññ {id} –≤–∏–¥–∞–ª–µ–Ω–æ')
                else:
                    await message.answer(f'–ó–∞–ø–∏—Å—É ‚Ññ {id} –Ω–µ —ñ—Å–Ω—É—î')
            else:
                data = await check_record(id=id,user_id=message.from_user.id)
                if data == True:
                    await delete_profile(id)
                    await message.answer(f'–ó–∞–ø–∏—Å ‚Ññ {id} –≤–∏–¥–∞–ª–µ–Ω–æ')
                else:
                    await message.answer(f'–ó–∞–ø–∏—Å—É ‚Ññ {id} –Ω–µ —ñ—Å–Ω—É—î')
        else:
            await message.reply('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ')
    except ValueError:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ1')
    await state.finish()


@dp.message_handler(Text(equals="–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å ‚úçÔ∏è"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? –û–±–µ—Ä–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω!",
                        reply_markup=inline_kb)

    await ProfileStates.emoji.set()  # —É—Å—Ç–∞–Ω–æ–≤–ª—é–º–æ —Å—Ç–∞–Ω –µ–º–æ—Ü—ñ—ó

@dp.callback_query_handler(state=ProfileStates.emoji)
async def callback_emoji(callback: types.CallbackQuery, state:FSMContext):
    async with state.proxy() as data: #–≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–µ –±—É–¥–µ–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–∞–Ω—ñ
        data['emoji'] = callback.data
    if data['emoji'] == "–†–∞–¥—ñ—Å—Ç—å":
        await callback.message.reply(text='–∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä', reply_markup=keyboard(key_happy))
    elif data['emoji'] == "–°–∏–ª–∞":
        await callback.message.reply(text='–∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä', reply_markup=keyboard(key_force))
    elif data['emoji'] == "–°–ø–æ–∫—ñ–π":
        await callback.message.reply(text='–∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä', reply_markup=keyboard(key_calm))
    elif data['emoji'] == "–°–º—É—Ç–æ–∫":
        await callback.message.reply(text='–∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä', reply_markup=keyboard(key_sadness))
    elif data['emoji'] == "–ù–∞–≤—ñ–∂–µ–Ω—ñ—Å—Ç—å":
        await callback.message.reply(text='–∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä', reply_markup=keyboard(key_fury))
    elif data['emoji'] == "–°—Ç—Ä–∞—Ö":
        await callback.message.reply(text='–∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä', reply_markup=keyboard(key_fear))
    await ProfileStates.next()


@dp.callback_query_handler(state=ProfileStates.emoji1)
async def emoji1(callback: types.CallbackQuery, state:FSMContext):
    async with state.proxy() as data:
        data['emoji1'] = callback.data
    await callback.message.reply('–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –µ–º–æ—Ü—ñ—ó –≤—ñ–¥ 0 –¥–æ 10')
    await ProfileStates.next()


@dp.message_handler(state=ProfileStates.value)
async def get_emotion_level(message: types.Message, state: FSMContext):
    try:
        level = int(message.text)
        if 0 <= level <= 10:
            async with state.proxy() as data:
                data['value'] = level
            await message.reply('–©–æ —Å–ø—Ä–æ–≤–æ–∫—É–≤–∞–ª–æ?')
            await ProfileStates.next()
        else:
            await message.answer('–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –µ–º–æ—Ü—ñ—ó –≤—ñ–¥ 0 –¥–æ 10')
    except ValueError:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 10')

@dp.message_handler(state=ProfileStates.value)
async def value_emoji(message: types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['value'] = message.text

    await message.reply('–©–æ —Å–ø—Ä–æ–≤–æ–∫—É–≤–∞–ª–æ?')
    await ProfileStates.next()

@dp.message_handler(state=ProfileStates.what_heppend)
async def what_heppend(message: types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['what_heppend'] = message.text

    if 'id_update' in data:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–∞ 'id' –≤ —Å–ª–æ–≤–Ω–∏–∫—É data
        await update_profile(state, id=data['id_update'], user_id=message.from_user.id, user_name=message.from_user.full_name,
                             time=datetime.now())
        await message.answer('–ó–∞–ø–∏—Å –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ')
        await state.finish()
    else:
        await edit_profile(state, user_id=message.from_user.id, user_name=message.from_user.full_name,
                           time=datetime.now())
        await message.answer('–ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ')
        await state.finish()


@dp.message_handler(Text(equals="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å üìù"))
async def edit_records(message: types.Message):
    if message.from_user.id == 346422904:
        data = await read_db()
        await message.answer(text=f"<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤:</b>\n\n{data}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä ID –∑–∞–ø–∏—Å—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
                             parse_mode=types.ParseMode.HTML)
    else:
        data = await read_db(user_id=message.from_user.id)
        await message.answer(text=f"<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤:</b>\n\n{data}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä ID –∑–∞–ø–∏—Å—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
                             parse_mode=types.ParseMode.HTML)

    await ProfileStates.id_update.set()

@dp.message_handler(state=ProfileStates.id_update)
async def number_id_for_update(message,state:FSMContext):
    try:
        id = int(message.text)
        if id > 0:
            async with state.proxy() as data:
                data['id_update'] = id
            if message.from_user.id == 346422904:
                data = await check_record(id=id)
                if data == True:
                    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –µ–º–æ—Ü—ñ—é', reply_markup=inline_kb)
                    print(message.text)
                    await ProfileStates.emoji.set()
                else:
                    await message.answer(f'–ó–∞–ø–∏—Å—É ‚Ññ {id} –Ω–µ —ñ—Å–Ω—É—î')
            else:
                data = await check_record(id=id,user_id=message.from_user.id)
                if data == True:
                    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –µ–º–æ—Ü—ñ—é', reply_markup=inline_kb)
                    print(message.text)
                    await ProfileStates.emoji.set()
                else:
                    await message.answer(f'–ó–∞–ø–∏—Å—É ‚Ññ {id} –Ω–µ —ñ—Å–Ω—É—î')
        else:
            await message.reply('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ')
    except ValueError:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ')


executor.start_polling(dp,
                       on_startup=on_startup)

